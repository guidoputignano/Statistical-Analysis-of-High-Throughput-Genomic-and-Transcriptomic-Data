---
title: "STA426 Exercise 10: preprocess and explore a single cell data"
author: "Hubert Rehrauer"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---


```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
startTime = proc.time()
```


The single cell dataset consists of peripheral blood mononuclear cells. These cells comprise different cell types. For each cell the ground truth is provided in terms of the assigned cell type that was derived using additional data. A cell has "unassigned" as cell type if it could not be reliably assigned to a cell type. 

1. Modify the quality-based cell filtering to remove the low quality cells that could not be assigned. Try with  different thresholds 
2. Try different clustering methods and parameters such that different cell types are in separate clusters.

The example workflow is inspired by http://bioconductor.org/books/release/OSCA/





```{r load packages, warning=FALSE}
suppressPackageStartupMessages(library(scuttle))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(HDF5Array))
suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(pheatmap))
BPPARAM = BiocParallel::MulticoreParam(workers=2)
BPPARAM = BiocParallel::SerialParam()


```


## Question 01: Load the data


```{r load data}
sce = readRDS("pbmc-sce.RDS")
sce
```

Optionally subsample 2000 cells to reduce runtime
```{r subsample cells}
set.seed(38)
sce = sce[ , sample(1:ncol(sce), size = 2000, replace = FALSE)]

```

The cell type abundances are

```{r barplot cell types, fig.width=10, fig.height=5}
cd = as.data.frame(colData(sce))
ggplot(cd, aes(x=cellType)) + geom_bar() +
   scale_fill_manual() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))


```


## Question 2

Compute and visualize quality scores

* number of detected genes
* number of assigned reads
* percentage of mitochondrial reads

Visualize the quality scores with `plotColData`.

```{r quality scores}

isMito <- grepl("^mt-", rowData(sce)$Symbol, ignore.case=TRUE)

sce <- addPerCellQC(sce, subsets=list(Mito=isMito), percent_top=100,
                    detection_limit=0, BPPARAM=BPPARAM)



```

Filter by quality scores. The function `isOutlier` defines outliers based on the difference to the median scores. Refer to the manual. Consider also setting manual thresholds.



```{r filter low quality cells}
qc.lib <- isOutlier(sce$sum, log=TRUE, type="lower")
qc.nexprs <- isOutlier(sce$detected, log=TRUE, type="lower")
qc.mito <- isOutlier(sce$subsets_Mito_percent, type="higher")
qc.top <- isOutlier(sce$percent.top_100, type="higher")

discard <- qc.lib | qc.nexprs | qc.mito | qc.top

DataFrame(LibSize=sum(qc.lib), NExprs=sum(qc.nexprs),
          MitoProp=sum(qc.mito),
          TopProp=sum(qc.top), Total=sum(discard))

sce$discard = discard

sceFilt = sce[ , !sce$discard]
minCellsExpressed = 5
isExpressed <- Matrix::rowSums(counts(sceFilt) >= 1) >= minCellsExpressed
sceFilt = sceFilt[isExpressed, ]


```


```{r, eval=FALSE, include=FALSE}
## Question 3

#Check if there are signs for ambient RNA. E.g. the genes

sce = logNormCounts(sce)

## check if monocyte markers or HBB are expressed in other cells

head(rowData(sce))
ids <- rownames(sce)[rowData(sce)$Symbol %in% c("CD14", "CCR2", "FCGR3B", "ITGAM")]
plotExpression(sce, ids, x="cellType") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))


ids <- rownames(sce)[rowData(sce)$Symbol %in% c("HBB")]
plotExpression(sce, ids, x="cellType") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
```


## Question 3

Normalize

```{r normalize}
sceFilt = logNormCounts(sceFilt)



```

Compute reduced dimension representation
```{r dim red}
set.seed(38)
dec <- modelGeneVarByPoisson(sceFilt, BPPARAM=BPPARAM)
topGenes <- getTopHVGs(dec, n = 2000)
sceFilt <- runPCA(sceFilt, subset_row=topGenes, BPPARAM=BPPARAM) 
sceFilt <- runUMAP(sceFilt, dimred="PCA", BPPARAM=BPPARAM)

```


Cluster
```{r kmeans}
set.seed(100)
clust.kmeans <- kmeans(reducedDim(sceFilt, "PCA"), centers=10)
table(clust.kmeans$cluster)

```


```{r plot umap, fig.width=10}
colLabels(sceFilt) <- factor(clust.kmeans$cluster)
plotReducedDim(sceFilt, "UMAP", colour_by="label")
plotReducedDim(sceFilt, "UMAP", colour_by="cellType")
```


## Question 4

Compute agreement of clusters with cell types

```{r cluster agreement}
tab <- table(sceFilt$label, sceFilt$cellType)
phm <- pheatmap(log10(tab+10), main="cluster vs cell type",
    color=viridis::viridis(100), silent=FALSE)
phm



```


Sensitivity and specificity of low quality cell detection
```{r sensitivity}
mean(sce$discard[sce$cellType == "unassigned"])
mean(!sce$discard[sce$cellType != "unassigned"])

```

Agreement of clustering and cell type

```{r adjusted rand index}
mclust::adjustedRandIndex(sceFilt$label,sceFilt$cellType)
```

Runtime in seconds
```{r elapsed}
paste(signif((proc.time() - startTime)[ "elapsed"], digits=4), "s")
```